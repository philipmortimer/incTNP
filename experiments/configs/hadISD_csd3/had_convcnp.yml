generators:
  train:
    _target_: tnp.data.hadISD.HadISDDataGenerator
    min_nc: 1
    max_nc: 2033 # 2033 is max for certain box
    nt: 250
    ordering_strategy: ${params.ordering_strategy}
    samples_per_epoch: 32_000
    batch_size: 32
    data_directory: ${params.train_path}
  val:
    _target_: tnp.data.hadISD.HadISDDataGenerator
    min_nc: 1
    max_nc: 2033
    nt: 250
    ordering_strategy: ${params.ordering_strategy}
    samples_per_epoch: 4_000
    batch_size: 32
    deterministic: True
    data_directory: ${params.val_path}
  test:
    _target_: tnp.data.hadISD.HadISDDataGenerator
    min_nc: 1
    max_nc: 2033
    nt: 250
    ordering_strategy: ${params.ordering_strategy}
    samples_per_epoch: 80_000
    batch_size: 32
    deterministic: True
    data_directory: ${params.test_path}

model:
  _target_: tnp.models.convcnp.ConvCNP
  encoder: ${convcnp_encoder}
  decoder: ${tnp_decoder}
  likelihood: ${likelihood}

convcnp_encoder:
  _target_: tnp.models.convcnp.ConvCNPEncoder
  conv_net: ${cnn}
  grid_encoder: ${grid_encoder}
  grid_decoder: ${grid_decoder}
  z_encoder: ${z_encoder}
  hadisd_mode: true
  fourier_encoder: ${fourier_encoder}

cnn:
  _target_: tnp.networks.cnn.CNN
  dim: 2 # Changed from gp case
  num_channels: ${params.num_channels}
  num_blocks: ${params.num_blocks}
  kernel_size: ${params.kernel_size}

grid_encoder:
  _target_: tnp.networks.setconv.SetConvGridEncoder
  dims: 2 # Changed from gp case
  grid_range: ${params.grid_range}
  grid_shape: ${params.grid_shape}
  init_lengthscale: ${params.init_lengthscale}

grid_decoder:
  _target_: tnp.networks.setconv.SetConvGridDecoder
  dims: 2 # Changed from gp case

z_encoder:
  _target_: tnp.networks.mlp.MLP
  in_dim: ${eval:'2 + ${params.time_embed_dims} + ${params.elev_embed_dims}'} # In dim changed
  out_dim: ${params.num_channels}
  num_layers: 2
  width: ${params.num_channels}

tnp_decoder:
  _target_: tnp.models.tnp.TNPDecoder
  z_decoder: ${z_decoder}

fourier_encoder:
  _target_: tnp.networks.fourier_embed.FourierEmbedderHadISD
  embed_dim_lambdamin_lambda_max:
    - ${params.elev_emb_lmin_lmax}
    - ${params.time_emb_lmin_lmax}

z_decoder:
  _target_: tnp.networks.mlp.MLP
  in_dim: ${params.num_channels}
  out_dim: ${eval:'2 * ${params.dim_y}'}
  num_layers: 2
  width: ${params.num_channels}

likelihood:
  _target_: tnp.likelihoods.gaussian.HeteroscedasticNormalLikelihood

optimiser:
  _target_: torch.optim.AdamW
  _partial_: True
  lr: 5.0e-4

params:
  # Model + Training Params
  epochs: 100
  num_channels: 32
  num_blocks: 5
  kernel_size: 9
  num_decoder_kernels: 5
  grid_range:
    - [-1.0, 1.0]
    - [-1.0, 1.0]
  grid_shape: [50, 50] # Grid res hyper make as big as possible whilst still fitting in mem
  init_lengthscale: 0.1

  time_embed_dims: 32
  elev_embed_dims: 32
  time_emb_lmin_lmax: # 8760 = 24 * 365 (i.e hours in a year)
    - ${params.time_embed_dims}
    - 1.0
    - 8760.0
  elev_emb_lmin_lmax: # Elevation is z normalised. for current patch 7.7 sigma is the most extreme elev
    - ${params.elev_embed_dims}
    - 0.1
    - 8.0


  # Fixed constants known
  dim_x: 4
  dim_y: 1

  # Data Params - this may need some hand crafted finetuning (rune the pre proc scripts first if changing ranges). Also this might not always be checked properly so ensure they are correct
  ordering_strategy: "random"

  # File paths for specific training resource (adjust for machine)
  train_path: "/home/pm846/rds/hpc-work/Thesis/TNP-Inc/experiments/data_temp/csd3_all_data/downloaded/other/data_processed/train"
  val_path: "/home/pm846/rds/hpc-work/Thesis/TNP-Inc/experiments/data_temp/csd3_all_data/downloaded/other/data_processed/val"
  test_path: "/home/pm846/rds/hpc-work/Thesis/TNP-Inc/experiments/data_temp/csd3_all_data/downloaded/other/data_processed/test"

misc:
  project: convcnp-had
  name: ConvCNP-L${params.num_blocks}-C${params.num_channels}-K${params.kernel_size}-GS${params.grid_shape}
  resume_from_checkpoint: null
  gradient_clip_val: 0.5

  # Plot misc
  eval_name: test_eval
  num_grid_points_plot: 200 # Number of points to use for plot of gridded predictions
  dem_path: "/home/pm846/rds/hpc-work/Thesis/TNP-Inc/experiments/data_temp/csd3_all_data/downloaded/other/elev_data/ETOPO_2022_v1_60s_N90W180_surface.nc" # dem file
  cache_dem_dir: "/home/pm846/rds/hpc-work/Thesis/TNP-Inc/experiments/data_temp/csd3_all_data/downloaded/other/elev_data/" # Where to cache dem processing results
  seed: 1
  only_plots: False
  num_plots: 10
  subplots: True
  savefig: True
  logging: True
  plot_interval: 10
  check_val_every_n_epoch: 1
  checkpoint_interval: 20
  num_workers: 5
  num_val_workers: 2